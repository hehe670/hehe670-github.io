[{"title":"MySQL语法外键、分组、聚合、子查询","date":"2019-02-26T09:33:30.593Z","path":"2019/02/26/mysql语法聚合、外键、分组/","text":"条件语句的写法在sql中可以通过 ‘where 条件语句’ 来对操作对象进行筛选 - 筛选a. 比较运算符：= ，&lt;&gt; , &gt; ,&lt; ,&lt;=,&gt;=注意： 判断一个字段一个字段的值是否为空不能使用=和&lt;&gt;，而是使用 ‘is null’ 和 ‘is not null’。判断是否是空串– 字段名=’’b. 逻辑运算符： and or notc. where 字段名 between 值1 and 值2 —筛选出指定字段的值在值1和值2之间1select stuname,birth from t_student where birth between &apos;1990-1-1&apos; and &apos;1999-12-31&apos;; d. where 字段名 in 集合; — 筛选出字段的值是集合的元素。集合是用（）括起来，里面有多个值1select * from t_student where stuname in (&apos;小花&apos;,&apos;小明&apos;,&apos;路飞&apos;); e. like操作 数据类型– varchar(size):不定长字符串，字符串最长为size的值– char(size) : 定长字符串，– text: 不限长度，最长255个字符。– int/tinyint(-128~127) 、bigint– float(size,d)/double(size,d) — size是数字长度，d是小数总位数– bit : 只有0和1 两个值– date/datetime/time: 值可以是时间函数的结果，也可以是时间字符串;计算或比较的时候内部是按时间处理的 3.去重select distinct 字段名 from 表名; 对查询到的字段名去掉重复的 – ==========添加约束– 1.创建表的时候添加约束123456create table if not exists t_college(collid int,collname varchar(20) not null, #创建表的时候添加约束website varchar(300),intro varchar(200),primary key(collid)); – 2.通过添加约束索引的方式添加约束– alter table 表名 add constraint 索引名 约束名 (字段名);– 说明：索引名是自己随便命名，用来指向当前添加的约束。alter table t_college add constraint con_website unique (website); – 给t_college表中的website添加unique约束，约束索引名con_website – 2.1删除约束– alter table 表名 drop index 约束索引名;alter table t_college drop index con_website; 外键和E.R图– 1.什么是外键：表中某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键– 1.1多对1外键的添加，将外键添加到多的一方对应的表中– 一对一的外键添加：将外键随便添加到哪一方，并添加值唯一约束– 多对多的外键添加： 关系型数据中，两张表无法实现多对多的关系，需要一个中间表。(中间表有两个外键,分别参照多对多的两个表的主键) – 1.2怎么添加外键：– a.添加外键对应的字段alter table 表名 add column 字段名 约束;– b.给设计好的外键对应的字段添加外键约束– alter table 表1 add constraint 索引名 foreign key (外键字段名1) references 表2 (被参照的字段名2); — 索引名： 字段1名索引名字段2名，自己取– - 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2 – c.删除外键约束alter table 表1 drop foreign key 索引名; – 可以删除外键约束，但是外键索引还在，需要再删除索引– 注意：删除外键约束的时候，直接删除约束的索引无效，必须先删除约束，然后再删除索引。alter table 表1 drop index 索引名; – 删除索引 – d. 多对多的外键约束123456789create table if not exists tb_score( scoreid int not null auto_increment, mark float(4,1), stuid int comment &apos;学生外键&apos;, couid int comment &apos;课程外键&apos;, primary key(scoreid) ); INSERT INTO tb_score (mark) VALUES (89),(45.5),(100),(95),(60),(77),(90),(97),(49),(66),(56),(71),(80.5),(33),(87),(56),(74),(68),(80),(92),(34),(75); – 添加学生的外键约束 alter table tb_score add constraint fk_stuid_sco foreign key(stuid) references tb_student (stuid); alter table tb_score add constraint fk_couid_sco foreign key(couid) references tb_course (couid); =======查询的高级操作– 1.聚合：max(),min(),sum()，avg()– 求平均值 ,count() –求个数– select 聚合函数(字段) from 表名 where 条件; –按条件对表中指定的字段进行查询，然后将查询结果做相应的聚合运算。聚合运算结果是最终结果。select mark from tb_score; – 获取表中所有的分数值select max(mark) as maxmark from tb_score; – 获取这个表中所有分数的最大值select avg(mark) as avgmark from tb_score;select count(mark) as countmark from tb_score where mark&gt;90; – 统计大于90的个数– 计算平均值如果参与运算的对象值为null,那这个数据不会参与运算。求和同样。 – 2.分组– select 聚合操作(字段1) from 表名 where 条件 group by (字段2); – 将指定表中满足条件的记录按照字段2的值进行分组(值是一样的在一个组里),然后再将每个分组作为整体按照指定的字段进行指定的聚合操作。– 求每个学生的平均成绩select stuid,avg(mark) from tb_score group by (stuid);– 注意：a.字段操作的位置除了分组字段不用聚合，其他字段都必须聚合– b. 分组的时候where要放到分组前对需要分组的数据进行筛选。 – having – 在分组后用having代替where来对分组后的数据进行筛选– 获取平均分数大于60的学生idselect stuid from tb_score group by (stuid) having avg(mark)&gt;60; – 3.子查询:将一个查询操作的结果作为另一个查询的数据源。select stuid from tb_score where mark&gt;90 and stuid is not null; – 获取成绩大于90分的学生id select stuname from tb_student where stuid in(select stuid from tb_score where mark&gt;90 and stuid is not null;);– 获取成绩大于90分的学生的名字。 – 将一个查询结果作为查询对象给另一个查询，第一个查询需要重命名select mark from (一个查询结果) as t2; – =============1.学生表===============CREATE TABLE IF NOT EXISTS tb_student(stuid int not NULL auto_increment,stuname VARCHAR(20) not NULL,tel CHAR(11) not NULL,birth date DEFAULT ‘2019-10-21’,addr VARCHAR(100),genter bit,PRIMARY key(stuid)); alter table tb_student add column collid int;alter table tb_student add constraint tb_stu_coll foreign key (collid) references tb_college (collid); – ===============2.课程表================CREATE TABLE IF NOT EXISTS tb_course(couid int NOT NULL auto_increment,couname VARCHAR(20) NOT NULL,startdate date NOT NULL DEFAULT ‘2019-10-21’,intro VARCHAR(200),credit int NOT NULL,PRIMARY key(couid)); alter table tb_course add column teaid int;alter table tb_course add constraint tb_cour_tea foreign key (teaid) references tb_teacher (teaid); – =================3.学院表====================CREATE TABLE IF NOT EXISTS tb_college(collid int auto_increment,website VARCHAR(200) UNIQUE,collname VARCHAR(50),PRIMARY KEY(collid)); – =================4.老师表====================CREATE TABLE IF NOT EXISTS tb_teacher(teaid int NOT NULL auto_increment,teaname VARCHAR(20) NOT NULL,teaage INT,tel char(11),PRIMARY KEY(teaid)); alter table tb_teacher add column collid int;alter table tb_teacher add constraint tb_teac_coll foreign key (collid) references tb_college (collid);","tags":[{"name":"MySQL语法","slug":"MySQL语法","permalink":"http://yoursite.com/tags/MySQL语法/"}]},{"title":"MySQL语法","date":"2019-02-25T11:53:48.326Z","path":"2019/02/25/mysql语法/","text":"注意：SQL中大小写不敏感（大写和小写是一样的）；每条SQL语句必须以分号结束。 一. DDL - 和要提供数据库和表的创建、删除和修改 删除数据库：drop database 数据库名； 12DROP DATABASE school; #直接删除指定数据库drop database if exists school; #如果指字数据库存在就删除 创建数据库：create database 数据库名； 123CREATE DATABASE school; # 直接创建指定数据库CREATE DATABASE if not exists school; # 如果不存在就创建CREATE DATABASE if not exists school default charset utf8; # 创建数据库的时间设置字符集编码方式为utf8..支持中文 使用/切换数据库: use 数据库名； 1use school; 新建表： create table 表名(字段名1 类型1，字段名2 类型2，……)；注意：a.表名一般需要加前缀‘t’或者‘tb’.b.字段用来确定表中要存储哪些数据，字段名随便命名，但不能是关键字`c.数据类型必须是MySQL支持的数据类型`常用数据类型：int,char(size)定长字符串size是必须这么长,varchar(size)不定长字符串size是最大值,text 字符串， bit 布尔,date 日期 1create table if not exists t_student(stuid int,stuname varchar(5),gender bit,birth date); create table 表名(字段名1 类型1 约束1，字段名2 类型2 约束2，……);常用约束：not null --不能为空 ，default --设置默认值，unique -值唯一，primary key --主键约束, auto_increment - 自动增长. 主键约束：主键指的是表中能够唯一标识一条记录的字段（通过主键值能够找到表中唯一一行记录）学生信息中的学号可以作为主键 注意：一个字段可以添加多个约束，约束之间用空格隔开注意：auto_increment 自动增长（只针对主键有效，并且主键类型是int）12345create table if not exists t_student(stuid int not null default 1 auto_increment,stuname varchar(5) not null,gender bit default 1,birth date,primary key(stuid) #设置stuid为当前表的主键（间接约束这个字段的值为唯一）); 4.删除表： drop table if exists 表名； 注意use 数据库，切换要删除的数据库清空表记录：truncate table 表名; 删除后表还在，记录没有了12drop table if exists t_student;truncate table t_student; 5.修改表：添加字段：alter table 表名 add column 字段名 字段类型 约束; 添加多个字段用逗号隔开1alter table t_student add column score float(5,2) default 0; #删除字段：alter table 表名 drop column 字段名; 二：DML 数据操作语言 –主要针对数据库中数据的增、删、改、查。 增（添加数据/记录）插入数据、记录： insert into 表名 values(值1，值2，……)； –依次给指定表中的字段赋值1INSERT into t_student values (1,&apos;张三&apos;,0,&apos;2014-5-6&apos;); 插入数据/记录：insert into 表名(字段名1，字段名2，……) values(值1，值2，……)； 以指定的顺序给指定的字段赋值12insert into t_student(stuname,birth) values(&apos;小明&apos;,&apos;2011-2-21&apos;);insert into t_student(stuname,birth) values(&apos;小花&apos;,&apos;2011-2-22&apos;),(&apos;光光&apos;,&apos;2023-4-6&apos;); # 一次增加多条数据， 注意值的问题：SQL中是数字对应的值直接写，字符需要引号引起来。bit类型的值只有0或者1。。时间可以用内容是满足时间格式的字符串、也可以是通过时间函数获取的值123时间函数：now() --当前时间,date(now()) --获取当前日期; select month(now()) --当前月select now(); select year(now()); -- 当前年 删（删除数据/记录）delete from 表名; – 删除指定表中所有记录1delete from t_student; delete from 表名 where 条件语句; – 删除满足条件的记录SQL中的条件语句：=(判断是否相等),&lt;&gt;(不相等)，&gt;,&gt;=,&lt;,&lt;=1delete from t_student where stuid=100; #删除t_student表中id等于100的记录 改（修改数据）update 表名 set 字段=新值，字段2=新值2，……; 将指定表中所有行的指定列/字段的值赋值为新值1UPDATE t_student set birth=&apos;1991-2-12&apos;; #所有生日变成1991 update 表名 set 字段=新值，字段2=新值2，…… where 条件诗句; 将表中满足条件的行中指定字段的值赋为新值。12UPDATE t_student set gender=0 where stuname=&apos;小花&apos;; # 将名字是小花的性别变为0UPDATE t_student set gender=0 where stuname like &apos;小%&apos;; # 选中开头是小的名字，将性别变为0.。 % ：通配符，表示任意个数的任意字符（包括0个）_ :通配符下划线，表示一个任意字符注意：通配符只对字符串有效1UPDATE t_student set gender=1 where stuname like &apos;%小%&apos;; -- 选中姓名中有小字的 查（获取数据）4.1 直接查询select * from 表名; –获取指定表中所有行所有列（所有数据）1select * from t_student; select 字段名1,字段名2,…… from 表名; –获取指定表中所有行的指定列1select stuid,stuname from t_student; select * from 表名 where 条件语句; –获取指定表中所有满足条件行的所有数据1select * from t_student where stuname like &apos;%小%&apos;; #所有名字包含小的 4.2列重命名select 字段1 as 新字段1, 字段2 as 新字段2，…… from 表名;1select stuid as &apos;学号&apos;, stuname as &apos;姓名&apos;,gender from t_student; #查询三种，只有2种重命名。。 注意：这儿的as可以省略4.3对查询结果重新赋值（一般针对布尔数据）select if(字段相关的条件语句，值1，值2) from 表名;select if(字段名，值1，值2) from 表名; –查询指定的字段，并且判断字段对应的值，是1获取值1，结果是值1；否则为值2注意：这儿的if用法是MySQL专有的 if(字段名，值1，值2)1234select stuname,if(gender,&apos;男&apos;,&apos;女&apos;) from t_student;select stuname,if(gender,&apos;男&apos;,&apos;女&apos;) as &apos;性别&apos; from t_student; 通用写法:case 字段 when 值 then 新值1 else 新值2 endselect case gender when 1 then &apos;男&apos; else &apos;女&apos; end as &apos;性别&apos; from t_student; 4.4对列进行合并运算select concat(字段1,字段2,……) from 表名；12select concat(stuname,stuid) as &apos;name_id&apos; from t_student;select concat(stuname,&apos;:&apos;,stuid) as &apos;name_id&apos; from t_student; 注意：数字和字符串数据可以合并，bit类型的数据不可以合并4.5模糊查询 – 查询的时候通过like条件来指定查询对像SQL中支持逻辑运算符and(逻辑与) 和 or(逻辑或)，not(逻辑非)1select * from t_student where stuname like &apos;%小%&apos; and not stuid&gt;3; 4.6结果排序(先按之前的语法查询再排序)select from 表名 order by 字段; –对查询结果按指定字段的值进行升序排序select from 表名 order by 字段 ASC; –升序排序select * from 表名 order by 字段 desc; –降序排序排序的时候可以通过在order by 后面加多个字段进行联排，写在前面优先级高1select * from t_student order by gender asc, stuid desc; #先按性别进行升序排序，再按学号降序排序。 4.7限制 对查询的结果进行限制1234select * from 表名 limit N; #获取查询结果的前N条记录select * from t_student limit 3; # 获取查询结果的前3条记录-- select * from 表名 limit M offset N; #对查询结果跳过前N条数据，取M数据select * from t_student limit 4 offset 3; #跳过前3条数据，再取4条数据","tags":[{"name":"MySQL语法","slug":"MySQL语法","permalink":"http://yoursite.com/tags/MySQL语法/"}]},{"title":"mysql服务器","date":"2019-02-23T08:48:25.535Z","path":"2019/02/23/mysql配置/","text":"下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问:a. 登录进MySQL: mysql -uroot -p密码b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;c. 刷新权限：flush privileges;­","tags":[{"name":"mysql服务器","slug":"mysql服务器","permalink":"http://yoursite.com/tags/mysql服务器/"}]},{"title":"Linux指令系统","date":"2019-02-22T09:42:53.654Z","path":"2019/02/22/Linux指令/","text":"1.连接服务器: ssh root@ip地址2.退出: logout 命令名称 [命名参数] [命令对象] 一、日常操作1.cd指令 - 进入指定文件夹cd 目录 - 进入指定目录(也可以是文件夹对应的路径) ~相对路径 — 绝对路径 cd .. - 返回上层目录cd ~ - 回到根目录cd / - 进入系统根目录 2. ls指令 - 查看当前目录中的内容 ls ls -l/-lh - 查看详情 ls -a - 隐藏文件也一起显示 ls -R - 递归显示所有内容 ls -S/-t - 按大小/时间排序 3.pwd指令 - 显示当前完整目录 pwd 4.文件操作指令touch 文件名 - 新建文件cat 文件名 - 查看文件内容vim/vi 文件名 -打开文件 rm 文件名 - 删除文件rm - r 目录 - 删除文件夹 cp 文件名1 文件名2 - 将文件1中的内容拷贝到文件2中cp 文件1路径 文件2路径cp -r 文件名/目录名 目录2 - 将文件/目录拷贝到目录2中 mv 文件名1 文件名2 - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）mv 文件1路径 文件2路径 mv 文件名1 文件目录 - 将文件1移动到指定目录中注意: mv指令不能加-r来操作目录(注意：cp/mv/rm 后面可以跟： -i询问 -f强制 -n不覆盖) mkdir 目录名 - 新建文件夹mkdir -p a/b/c - 按层级创建a,b,c三个文件夹mkdir -p a/{b,c}/{d,e,f} -同一层级创建多个a创建两个，每个里再创建3个rmdir 目录名 - 删除指定空目录 5.history - 显示历史指令记录bashrc 配置显示时间：export HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “修改bashrc 后使其生效: source ~/.bashrc 或 . .bashrc 6.链接ln -s 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)ln 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个硬链接（了解） 注意: 源文件不存在的时候，软件无效，硬链接变成普通文件 7.快捷键ctr + f - 前进一个字符ctr + b - 后退一个字符ctr + a - 回到行首ctr + e - 回到行尾ctr + w - 向左删除一个单词ctr + u - 向左删除全部ctr + k - 向右删除全部ctr + y - 粘贴上次删除的内容ctr + l - 清屏 二、进程相关指令(用得较少)1.ps指令ps - 进程状态ps -aux 或者 ps ex - 查看进程ps -aux|grep 进程名 - 查看指定进程ps grep 进程ID 2.top指令top - 动态监控进程top -p PID1,PID2,…. - 动态监控指定进程 3.free指令free -单位 - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g, -k等！ 4.kill指令 kill 进程号 - 杀死指定的进程kill -1/-9/-15 - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程pkill 进程名 - 按名字处理进程killall 进程名 - 处理名字匹配的进程uptime - 查看系统状态 三、权限管理1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多) users - 查看当前用户groups - 查看当前分组 groupadd 分组名 - 添加分组 useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 - 创建一个用户添加到指定的分组中(在home创建相应的文件夹) usermod -G 分组列表 用户名 - 修改分组 passwd 用户名 - 修改密码 su 用户名 - 切换用户身份 sudo - 以管理员执行其他程序注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序 b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容 ## Allow root to run any commands anywhere root ALL=(ALL) ALL xiaoming ALL=(ALL) ALL (自己添加的xiaoming是用户名) 2.chmodchmod 权限值 文件 - 修改指定文件的权限 chmod [a,u,g,o][+,-][r,w,x] 文件 - 为指定文件，给所有用户添加相应的权限 (a:所有，u:自己，g:同组，o:其他； +：添加， -: 取消； r:读，w:写，x:执行)chown 用户名 文件 - 改变文件所有者 (权限制是三组二进制值)self group otherrwx rwx rwx111 101 001 - 自己读写可执行，同一分组的只读可执行，其他的只可执行110 100 000 chmod 644 文件chmod 777 文件chmod 666 文件 四、日志管理1.cat指令cat 文件 - 查看文件内容 2.查看部分head -n N 文件 - 查看前N行内容tail -n N 文件 - 查看后N行内容 3.less [-N] 文件 - 按 j 向下 - 按 k 向上 - 按 f 向下翻屏 - 按 b 向上翻屏 - 按 g 到全文开头 - 按 G 到全文结尾 - 按 Q 退出 more [-N] 文件 - 和less差不多，这个是尽可能多，less是尽可能少的加载 4.处理sort - 排序 (cat 文件 |sort)uniq - 去重 (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用: |sort|uniqawk ‘{print $N}’ - 打印第N列的内容(netstat -natp|awk ‘{print $4}’) history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3 -获取历史指令中，使用最频繁的三个指令 5.重定向执行获取数据的指令 &gt; 文件 （将执行指定的结果存储到文件中 - 覆盖原文件中内容）执行获取数据的指令 &gt;&gt; 文件 (将执行指定的结果存储到文件中 - 在原文件的最后追加) 6.统计wc -c(字符)/-w(单词)/-l(行) 文件 6.查找grep 查看对象 目录/文件 参数​ 参数： -i 忽略大小写: grep you bb.txt -i -n 显示行标号： grep you bb.txt -n / grep you bb.txt -i -n -E 通过正则表达式匹配: grep -E ‘正则表达式’ 文件 注意： Linux中，正则不支持: \\d, \\s,\\w,\\b,\\D,\\S,\\W,\\B 支持：. +, *, ?, {N,M}, [], ^, $ -v 忽略字段: grep you bb.txt -v (在bb.txt中找不包含you的所有行) grep -E &apos;[0-9]+\\.[0-9]+&apos; abb.txt -v -rn 递归查找目录，并打印行号 grep -r you ./ (在当前文件夹下中所有文件中去找包行’you’的行) —include=‘*.py’ 仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos; —exclude=‘*.js’ 不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos; 例如： grep you bb.txt grep you bb.txt -i grep you bb.txt -i -n grep -E &apos;[0-9]+&apos; bb.txt find DIR -name ‘.xxx’ 找到目录下所有名字匹配的文件: find a1 -name ‘.txt’(在文件夹a1中找所有txt文件) 例：find ./ -size +20k -size -100k -name &apos;*.txt&apos; (找当前目录下大于20k并且小于100k的所有txt文件) which 指令 - 精确查找当前可执行的指令whereis 指令 - 查找所有匹配的命令 五、网络管理ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 ping 地址ping -i 时间 地址ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况 dig 地址 - 查看DNS ** wget 地址 - 下载 六、使用包管理工具包管理工具：yum yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 源代码构建安装 wget 安装包的路径 -下载安装包 gunzip/tar 压缩包 - 解压、解归档 (设置安装路径) cd 安装包目录 执行: make &amp;&amp; make install -编译安装包程序 给可执行文件添加软连接到usr/bin目录下 -添加快捷方式 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar 本地发送远程文件 scp指令：Scp 文件 root@ip地址：服务器上保存被发送文件的路径","tags":[{"name":"linux命令","slug":"linux命令","permalink":"http://yoursite.com/tags/linux命令/"}]},{"title":"Hexo博客搭建","date":"2019-02-22T09:42:53.652Z","path":"2019/02/22/Hexo博客搭建/","text":"1. 搭建博客使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js 首先在自己的电脑上创建一个空的文件夹’Hexo’ 在gitbash中终端中通过cd指令进入到刚才创建的文件夹中 输入指令 npm install -g hexo 安装Hexo 输入指令 hexo init 进行初始化 依次输入指令npm install hexo server 启动服务器博客内容发生改变后可以通过hexo clean hexo generate hexo deploy hexo server刷新后重新启动 2. 部署博客 在github上创建一个空的仓库，仓库名： 用户名.github.io 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容 deploy type: git repository: https://github.com/hehe670/hehe670-github.io.git branch: master ` 使用git部署, 输入指令npm install hexo-deployer-git --save 输入指令hexo clean hexo generate hexo deploy 对博客进行提交","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"git的使用 - 版本控制","date":"2019-02-22T09:42:53.650Z","path":"2019/02/22/git的使用 - 版本控制/","text":"git的使用 - 版本控制1.代码托管平台github.comgitee.comcoding.net 2.git命令基本指令git init —— 新建git仓库git add 文件/文件夹 —— 将文件添加到缓存区中git add -A —— 将工作区中的所有内容都提交 git status ——— 查看git状态git commit -m ‘提交信息’ —— 将缓存区中的内容全部提交到git本地仓库中git commit -a -m ‘清空’ git log ——- 查看提交日志 git reset - - hard HEAD—— 让工作目录中的内容和仓库中的内容保持一致git reset –hard HEAD^ —— 回到上一个版本git reset - - hard 版本号 —— 回到指定的版本 git checkout 文件名 —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态), 不能通过-A来恢复所有文件 1.没有本地仓库只有远程仓库(刚到公司，手头没有公司项目需要从公司的gitlab或者其他远程仓库上克隆到本地) 先cd到你打算方法项目的目录下git clone - 将服务器上的项目(仓库)克隆 2.本地有项目，并且已经更新过版本。需要关联远程仓库 先在代码托管平台创建空的远程仓库(不要自动创建README) cd到本地仓库，执行： git remote add origin 仓库地址 注意: 让本地已有的仓库和远程仓库关联的时候，远程仓库创建的时候不能添加README文件(创建空的仓库)git remote add origin 地址 关联远程仓库(只需要关联一次)git push [-u] origin master - 提交 (-u在第一次提交分之的时候才用) 如果创建远程仓库的时候仓库中有默认文件git pull —rebase origin master 1分之管理：a.创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之b.开发一般会自己创建一个develop分之，用来开发和测试c.多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master, develop, 功能/人员分之 git branch [-a] - 查看分之git branch 分之名 - 创建分之git checkout 分支名 - 切换分之git checkout -b 分之名 - 切换并创建新的分之 git diff 分之1 分之2 - 查看两个分之之间的差异 git merge 分之名 - 让当前分之和指定分之进行合并 (让当前分之拥有指定分之的内容) 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 练习：创建一个开发分之(develop),然后在创建两个开发者分之zhangsan和lisi; 然后在zhangsan的分之上添加一个文件夹(aaa)，文件夹中有一个文件(文件不能为空) 在lisi的分之上添加一个图片 最后将zhangsan和lisi分之都合并到develop中；然后再将develop合并到master上怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量) ssh地址的使用配置全局的用户信息(windows)git global config user.name “yuting”git global config user.email “yuting@163.com”","tags":[{"name":"git命令","slug":"git命令","permalink":"http://yoursite.com/tags/git命令/"}]},{"title":"vim编辑器之神","date":"2019-02-22T09:42:53.601Z","path":"2019/02/22/vim编辑器之神/","text":"配置vimrc配置在shell中可以通过 vim ~/.vimrc 或者 vim /etc/vimrc 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）： 常用操作1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种命令模式：进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有) 末行模式：在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号) 编辑模式：在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–) 2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面w – 只保存(类似快捷键ctr+s)q – 退出（在编辑区的内容全部都保存的情况下才有效）wq – 保存并退出q! – 强制退出（不保存修改信息） 3.光标操作以下光标操作都是在命令模式下输入的^(shift+6) – 移动到行首$(shift+4) – 移动到行尾G(shift+g) – 移动到文件末尾行号G – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行gg – 移动到文件开头 4.文本操作以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入dd – 删除光标所在的行数字dd – 从光标所在行开始往后面开始删，删除指定数量行内容:%d – 删除所有 yy – 复制光标所在的行数字yy – 从光标所在行开始复制指定行数的内容p – 将复制的内容粘贴到光标所在的位置u – 撤销ctr+r – 反撤销 :%!sort – 对内容排序 :/查找对象[/gice] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找 有冒号的是在按ESC后的命令行 **:/正则表达式[/参数] – 搜索匹配正则表达式的内容，按回车回到命令模式 按n往前查找，按N往后查找 :1,$s/被替换对象/替换内容/gice – 将正则表达式匹配到的内容替换成指定内容 注意：参数可以没有 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误 文件对比，同时打开两个文件时，ctr + w光标切换到另一个文件中 ：b 2 切换光标所在屏显示第2个文件内容 sp 或 vs 实现水平或垂直分屏","tags":[{"name":"vim","slug":"vim","permalink":"http://yoursite.com/tags/vim/"}]},{"title":"Nginx服务器","date":"2019-02-22T09:42:53.599Z","path":"2019/02/22/Nginx服务器安装/","text":"1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1234 yum install nginx``` c) 运行nginx Nginx不会自行启动。要运行Nginx systemctl start nginx 12nginx的运行命令: systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 12d) 系统启动时启动Nginx systemctl enable nginx 12e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 12345### 3.nginx目录共享配置 a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting b) 打开 etc/nginx/nginx.conf 文件，设置server #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表 root /home/yuting; location / { autoindex on; autoindex_exact_size on; autoindex_localtime on; } 12除了可以共享文件，还可以自定义页面 #自定义服务器页面 location / { root /home/yuting; index index.html index.htm; } ` 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中","tags":[{"name":"Nginx服务器","slug":"Nginx服务器","permalink":"http://yoursite.com/tags/Nginx服务器/"}]},{"title":"世界总是比你的梦想大","date":"2019-02-20T11:51:58.901Z","path":"2019/02/20/hello-world/","text":"见得越多，才越感觉自己的渺小。以为观书而知天下之大，然终未亲眼所见，世界那么多美好，正在随着时光而消逝。一步，一步；就算路上没发现风景，可目标就在前方，那就继续走吧。 如果发现并不美好，只能是梦想太小，继续向前走，就会有让你惊讶的风景。 当你懈怠时，一定要记得往前走","tags":[]}]