<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行者要习，习者要行</title>
  
  <subtitle>世界总是比你的梦想大</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-23T08:48:25.608Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>行者m</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx服务器</title>
    <link href="http://yoursite.com/2019/02/23/mysql%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/23/mysql配置/</id>
    <published>2019-02-23T08:48:25.535Z</published>
    <updated>2019-02-23T08:48:25.608Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源: <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:  <code>yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务: <code>systemctl enable mysqld</code>  </p></li><li>启动/重启MySQL服务：systemctl restart mysqld  </li><li>查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log  </li><li>更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’<br> 这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>　　　　方法一：把密码设置复杂点（这是最直接的方法）</p><p>　　　　方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　　　　　编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行validate_password=off</p><p>　　　　　　　　编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:<br> a. 登录进MySQL:  <code>mysql -uroot -p密码</code><br> b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code><br> c. 刷新权限：<code>flush privileges;­</code>  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载MySQL源安装包: &lt;code&gt;wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装MySQL源: 
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Nginx服务器" scheme="http://yoursite.com/tags/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux指令系统</title>
    <link href="http://yoursite.com/2019/02/22/Linux%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/02/22/Linux指令/</id>
    <published>2019-02-22T09:42:53.654Z</published>
    <updated>2019-02-23T04:30:43.158Z</updated>
    
    <content type="html"><![CDATA[<p>1.连接服务器:    ssh  root@ip地址<br>2.退出:  logout</p><p>命令名称 [命名参数] [命令对象]</p><h3 id="一、日常操作"><a href="#一、日常操作" class="headerlink" title="一、日常操作"></a>一、日常操作</h3><h6 id="1-cd指令-进入指定文件夹"><a href="#1-cd指令-进入指定文件夹" class="headerlink" title="1.cd指令       - 进入指定文件夹"></a>1.cd指令       - 进入指定文件夹</h6><p>cd  目录     - 进入指定目录(也可以是文件夹对应的路径)<br>               ~相对路径 — 绝对路径</p><p>cd  ..       - 返回上层目录<br>cd  ~    - 回到根目录<br>cd  /    - 进入系统根目录  </p><h6 id="2-ls指令-查看当前目录中的内容"><a href="#2-ls指令-查看当前目录中的内容" class="headerlink" title="2. ls指令        - 查看当前目录中的内容"></a>2. ls指令        - 查看当前目录中的内容</h6><p>  ls<br> ls  -l/-lh              -  查看详情<br>   ls -a           - 隐藏文件也一起显示<br>   ls -R        - 递归显示所有内容<br>   ls -S/-t        - 按大小/时间排序 </p><h6 id="3-pwd指令-显示当前完整目录"><a href="#3-pwd指令-显示当前完整目录" class="headerlink" title="3.pwd指令     - 显示当前完整目录"></a>3.pwd指令     - 显示当前完整目录</h6><p>   pwd</p><h6 id="4-文件操作指令"><a href="#4-文件操作指令" class="headerlink" title="4.文件操作指令"></a>4.文件操作指令</h6><p>touch  文件名        - 新建文件<br>cat 文件名           - 查看文件内容<br>vim/vi  文件名          -打开文件  </p><p>rm    文件名        - 删除文件<br>rm - r 目录        - 删除文件夹  </p><p>cp  文件名1  文件名2    - 将文件1中的内容拷贝到文件2中<br>cp  文件1路径   文件2路径<br>cp -r  文件名/目录名   目录2    - 将文件/目录拷贝到目录2中  </p><p>mv    文件名1  文件名2    - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）<br>mv  文件1路径   文件2路径</p><p>mv    文件名1  文件目录    - 将文件1移动到指定目录中<br><code>注意: mv指令不能加-r来操作目录</code><br><code>(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)</code></p><p>mkdir  目录名        - 新建文件夹<br>mkdir -p a/b/c        - 按层级创建a,b,c三个文件夹<br>mkdir -p a/{b,c}/{d,e,f}    -同一层级创建多个a创建两个，每个里再创建3个<br>rmdir  目录名        - 删除指定空目录</p><h6 id="5-history-显示历史指令记录"><a href="#5-history-显示历史指令记录" class="headerlink" title="5.history        - 显示历史指令记录"></a>5.history        - 显示历史指令记录</h6><p>bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “<br>修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc   </p><h6 id="6-链接"><a href="#6-链接" class="headerlink" title="6.链接"></a>6.链接</h6><p>ln -s 源路径  目标路径        - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)<br>ln 源路径  目标路径            - 给源路径对应的文件在目标路径下创建一个硬链接（了解）</p><p><code>注意: 源文件不存在的时候，软件无效，硬链接变成普通文件</code></p><h6 id="7-快捷键"><a href="#7-快捷键" class="headerlink" title="7.快捷键"></a>7.快捷键</h6><p>ctr + f         - 前进一个字符<br>ctr + b        - 后退一个字符<br>ctr + a        - 回到行首<br>ctr + e         - 回到行尾<br>ctr + w        - 向左删除一个单词<br>ctr + u        - 向左删除全部<br>ctr + k        - 向右删除全部<br>ctr + y        - 粘贴上次删除的内容<br>ctr + l        - 清屏    </p><h3 id="二、进程相关指令-用得较少"><a href="#二、进程相关指令-用得较少" class="headerlink" title="二、进程相关指令(用得较少)"></a>二、进程相关指令(用得较少)</h3><p>1.ps指令<br>ps                        - 进程状态<br>ps -aux  或者  ps ex            - 查看进程<br>ps -aux|grep 进程名        - 查看指定进程<br>ps grep  进程ID  </p><p>2.top指令<br>top                         - 动态监控进程<br>top  -p PID1,PID2,….        - 动态监控指定进程</p><p>3.free指令<br>free -单位                    - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g,  -k等！</p><p>4.kill指令</p><p>kill 进程号                    - 杀死指定的进程<br>kill -1/-9/-15                - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程<br>pkill  进程名                - 按名字处理进程<br>killall 进程名                - 处理名字匹配的进程<br>uptime                    - 查看系统状态  </p><h3 id="三、权限管理"><a href="#三、权限管理" class="headerlink" title="三、权限管理"></a>三、权限管理</h3><p>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)</p><p>users                                     - 查看当前用户<br>groups                                 - 查看当前分组</p><p>groupadd  分组名                            - 添加分组</p><p>useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名        - 创建一个用户添加到指定的分组中(在home创建相应的文件夹)</p><p>usermod -G 分组列表 用户名                    - 修改分组</p><p>passwd 用户名                            - 修改密码</p><p>su  用户名                                - 切换用户身份</p><p>sudo                                        - 以管理员执行其他程序<br>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序<br>          b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容  </p><pre><code>## Allow root to run any commands anywhere  root    ALL=(ALL)       ALL  xiaoming ALL=(ALL)      ALL        (自己添加的xiaoming是用户名)</code></pre><p>2.chmod<br>chmod       权限值   文件            - 修改指定文件的权限  </p><p>chmod    [a,u,g,o][+,-][r,w,x]  文件            - 为指定文件，给所有用户添加相应的权限<br>                                              (a:所有，u:自己，g:同组，o:其他；<br>                                            +：添加， -: 取消；<br>                                            r:读，w:写，x:执行)<br>chown  用户名     文件            - 改变文件所有者</p><p>(权限制是三组二进制值)<br>self      group    other<br>rwx      rwx        rwx<br>111       101        001            - 自己读写可执行，同一分组的只读可执行，其他的只可执行<br>110      100        000  </p><p>chmod  644  文件<br>chmod  777   文件<br>chmod 666    文件  </p><h3 id="四、日志管理"><a href="#四、日志管理" class="headerlink" title="四、日志管理"></a>四、日志管理</h3><p>1.cat指令<br>cat       文件                - 查看文件内容</p><p>2.查看部分<br>head -n  N  文件        - 查看前N行内容<br>tail  -n  N    文件         - 查看后N行内容</p><p>3.<br>less [-N]  文件  </p><pre><code>- 按 j 向下  - 按 k 向上  - 按 f 向下翻屏  - 按    b 向上翻屏  - 按 g 到全文开头  - 按 G 到全文结尾  - 按 Q 退出    </code></pre><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载  </p><p>4.处理<br>sort                  - 排序  (cat 文件 |sort)<br>uniq                - 去重  (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用:  |sort|uniq<br>awk ‘{print $N}’    - 打印第N列的内容(netstat -natp|awk ‘{print $4}’)</p><p>history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3           -获取历史指令中，使用最频繁的三个指令</p><p>5.重定向<br>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）<br>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)</p><p>6.统计<br>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>6.查找<br>grep  查看对象    目录/文件  参数<br>​<br>    参数：<br>        -i    忽略大小写:         grep you bb.txt   -i<br>        -n   显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n<br>        -E   通过正则表达式匹配:     grep -E  ‘正则表达式’  文件<br>        注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B<br>                                           支持：.   +, *, ?, {N,M}, [], ^, $</p><pre><code>    -v   忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)                    grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v    -rn  递归查找目录，并打印行号    grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)    —include=‘*.py’    仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos;    —exclude=‘*.js’    不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos;例如：    grep you bb.txt      grep you bb.txt -i    grep you bb.txt -i -n    grep -E &apos;[0-9]+&apos; bb.txt </code></pre><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><pre><code>例：find ./ -size +20k -size -100k -name &apos;*.txt&apos;   (找当前目录下大于20k并且小于100k的所有txt文件)</code></pre><p>which  指令        - 精确查找当前可执行的指令<br>whereis  指令    - 查找所有匹配的命令</p><h3 id="五、网络管理"><a href="#五、网络管理" class="headerlink" title="五、网络管理"></a>五、网络管理</h3><p>ifconfig     查看网卡状态</p><p>netstat   -natp                    - 查看网络连接状态<br>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态    </p><p>ping  地址<br>ping  -i   时间    地址<br>ping  -c  次数    地址</p><p>telnet  ip地址    端口         - 查看远程主机网络连接状况</p><p>dig 地址            - 查看DNS</p><p>** wget  地址            - 下载  </p><h3 id="六、使用包管理工具"><a href="#六、使用包管理工具" class="headerlink" title="六、使用包管理工具"></a>六、使用包管理工具</h3><p>包管理工具：yum </p><ul><li>yum search：搜索软件包，例如yum search nginx。  </li><li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。  </li><li>yum install：安装软件包，例如yum install nginx。  </li><li>yum remove：删除软件包，例如yum remove nginx。  </li><li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。  </li><li>yum check-update：检查有哪些可以更新的软件包。  </li><li>yum info：显示软件包的相关信息，例如yum info nginx。  </li></ul><p>源代码构建安装  </p><ol><li>wget  安装包的路径        -下载安装包  </li><li>gunzip/tar  压缩包         - 解压、解归档  </li><li>(设置安装路径)  </li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序  </li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式  </li></ol><p>压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar</p><p>本地发送远程文件 scp指令：<br>Scp 文件 root@ip地址：服务器上保存被发送文件的路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.连接服务器:    ssh  root@ip地址&lt;br&gt;2.退出:  logout&lt;/p&gt;
&lt;p&gt;命令名称 [命名参数] [命令对象]&lt;/p&gt;
&lt;h3 id=&quot;一、日常操作&quot;&gt;&lt;a href=&quot;#一、日常操作&quot; class=&quot;headerlink&quot; title=&quot;一、日
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux命令" scheme="http://yoursite.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2019/02/22/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/22/Hexo博客搭建/</id>
    <published>2019-02-22T09:42:53.652Z</published>
    <updated>2019-02-23T04:29:40.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1. 搭建博客"></a>1. 搭建博客</h3><p>使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </p><ol><li>首先在自己的电脑上创建一个空的文件夹’Hexo’  </li><li>在gitbash中终端中通过<code>cd</code>指令进入到刚才创建的文件夹中   </li><li>输入指令 <code>npm install -g hexo</code> 安装Hexo  </li><li>输入指令 <code>hexo init</code> 进行初始化  </li><li>依次输入指令<code>npm install</code> <code>hexo server</code> 启动服务器<br>博客内容发生改变后可以通过<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> <code>hexo server</code>刷新后重新启动    </li></ol><h3 id="2-部署博客"><a href="#2-部署博客" class="headerlink" title="2. 部署博客"></a>2. 部署博客</h3><ol><li><p>在github上创建一个空的仓库，仓库名： <code>用户名.github.io</code>  </p></li><li><p>修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容</p><p>deploy</p><p>  type: git<br>  repository: <a href="https://github.com/hehe670/hehe670-github.io.git" target="_blank" rel="noopener">https://github.com/hehe670/hehe670-github.io.git</a><br>  branch: master  <code>`</code></p></li><li><p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code>  </p></li><li><p>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-搭建博客&quot;&gt;&lt;a href=&quot;#1-搭建博客&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建博客&quot;&gt;&lt;/a&gt;1. 搭建博客&lt;/h3&gt;&lt;p&gt;使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   &lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="hexo博客" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git的使用 - 版本控制</title>
    <link href="http://yoursite.com/2019/02/22/git%E7%9A%84%E4%BD%BF%E7%94%A8%20-%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2019/02/22/git的使用 - 版本控制/</id>
    <published>2019-02-22T09:42:53.650Z</published>
    <updated>2019-02-23T04:28:19.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的使用-版本控制"><a href="#git的使用-版本控制" class="headerlink" title="git的使用 - 版本控制"></a>git的使用 - 版本控制</h2><h3 id="1-代码托管平台"><a href="#1-代码托管平台" class="headerlink" title="1.代码托管平台"></a>1.代码托管平台</h3><p>github.com<br>gitee.com<br>coding.net</p><h3 id="2-git命令"><a href="#2-git命令" class="headerlink" title="2.git命令"></a>2.git命令</h3><p>基本指令<br>git init   ——  新建git仓库<br>git add 文件/文件夹  ——  将文件添加到缓存区中<br>git add  -A    ——  将工作区中的所有内容都提交</p><p>git status ———    查看git状态<br>git commit -m  ‘提交信息’  ——  将缓存区中的内容全部提交到git本地仓库中<br>git commit -a -m ‘清空’</p><p>git log   ——-    查看提交日志</p><p>git reset  - - hard   HEAD——   让工作目录中的内容和仓库中的内容保持一致<br>git reset  –hard HEAD^   ——  回到上一个版本<br>git  reset  - - hard 版本号  ——  回到指定的版本</p><p>git checkout    文件名   ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态), 不能通过-A来恢复所有文件</p><p>1.没有本地仓库只有远程仓库(刚到公司，手头没有公司项目需要从公司的gitlab或者其他远程仓库上克隆到本地)</p><p>先cd到你打算方法项目的目录下<br>git clone <url>  - 将服务器上的项目(仓库)克隆</url></p><p>2.本地有项目，并且已经更新过版本。需要关联远程仓库</p><p>先在代码托管平台创建空的远程仓库(不要自动创建README)</p><p>cd到本地仓库，执行： git remote add origin 仓库地址</p><p><code>注意: 让本地已有的仓库和远程仓库关联的时候，远程仓库创建的时候不能添加README文件(创建空的仓库)</code><br>git remote add origin 地址              关联远程仓库(只需要关联一次)<br>git push [-u] origin master  - 提交  (-u在第一次提交分之的时候才用)</p><p>如果创建远程仓库的时候仓库中有默认文件<br>git pull   —rebase origin master</p><h3 id="1分之管理："><a href="#1分之管理：" class="headerlink" title="1分之管理："></a>1分之管理：</h3><p>a.创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之<br>b.开发一般会自己创建一个develop分之，用来开发和测试<br>c.多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发</p><p>常见分之： master, develop, 功能/人员分之</p><p>git branch [-a]           - 查看分之<br>git branch 分之名        - 创建分之<br>git checkout   分支名        -   切换分之<br>git checkout -b 分之名            - 切换并创建新的分之</p><p>git diff    分之1  分之2        - 查看两个分之之间的差异</p><p>git merge 分之名                - 让当前分之和指定分之进行合并  (让当前分之拥有指定分之的内容)</p><p><code>注意: 切换分之、push、pull，这些操作前要保证工作区是clean</code></p><p>练习：创建一个开发分之(develop),然后在创建两个开发者分之zhangsan和lisi;<br>         然后在zhangsan的分之上添加一个文件夹(aaa)，文件夹中有一个文件(文件不能为空)<br>         在lisi的分之上添加一个图片<br>         最后将zhangsan和lisi分之都合并到develop中；然后再将develop合并到master上<br>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p><p>ssh地址的使用<br>配置全局的用户信息(windows)<br>git  global  config user.name  “yuting”<br>git  global  config user.email    “<a href="mailto:yuting@163.com" target="_blank" rel="noopener">yuting@163.com</a>”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git的使用-版本控制&quot;&gt;&lt;a href=&quot;#git的使用-版本控制&quot; class=&quot;headerlink&quot; title=&quot;git的使用 - 版本控制&quot;&gt;&lt;/a&gt;git的使用 - 版本控制&lt;/h2&gt;&lt;h3 id=&quot;1-代码托管平台&quot;&gt;&lt;a href=&quot;#1-代码托
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="git命令" scheme="http://yoursite.com/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>vim编辑器之神</title>
    <link href="http://yoursite.com/2019/02/22/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/"/>
    <id>http://yoursite.com/2019/02/22/vim编辑器之神/</id>
    <published>2019-02-22T09:42:53.601Z</published>
    <updated>2019-02-23T08:12:45.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="http://img0.ph.126.net/G1W7LlyABzVRWxR0NH7lBQ==/6608192426287772805.png" alt> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><h4 id="2-保存和退出"><a href="#2-保存和退出" class="headerlink" title="2.保存和退出"></a>2.保存和退出</h4><p>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><h4 id="3-光标操作"><a href="#3-光标操作" class="headerlink" title="3.光标操作"></a>3.光标操作</h4><p>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><h4 id="4-文本操作"><a href="#4-文本操作" class="headerlink" title="4.文本操作"></a>4.文本操作</h4><p>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找   有冒号的是在按ESC后的命令行</p><p>**:/正则表达式[/参数]   – 搜索匹配正则表达式的内容，按回车回到命令模式 按n往前查找，按N往后查找</p><p><strong>:1,$s/被替换对象/替换内容/gice</strong>    – 将正则表达式匹配到的内容替换成指定内容 </p><p>注意：参数可以没有  </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre><p>文件对比，同时打开两个文件时，ctr + w光标切换到另一个文件中</p><p>：b  2  切换光标所在屏显示第2个文件内容</p><p>sp  或 vs  实现水平或垂直分屏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置vimrc配置&quot;&gt;&lt;a href=&quot;#配置vimrc配置&quot; class=&quot;headerlink&quot; title=&quot;配置vimrc配置&quot;&gt;&lt;/a&gt;配置vimrc配置&lt;/h3&gt;&lt;p&gt;在shell中可以通过 &lt;code&gt;vim ~/.vimrc&lt;/code&gt; 或者 &lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器</title>
    <link href="http://yoursite.com/2019/02/22/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/02/22/Nginx服务器安装/</id>
    <published>2019-02-22T09:42:53.599Z</published>
    <updated>2019-02-23T08:14:10.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="http://img2.ph.126.net/jzQlz9J-ndh9xXhO-3z71w==/1811572950210331610.png" alt="打开安全组设置"><br><img src="http://img2.ph.126.net/JNSNSZ1QyoX6XKatM_Owtg==/3041055648482420300.png" alt><br><img src="http://img1.ph.126.net/gVHVko9xCqDRh5x3htTxbg==/804455483539663219.png" alt><br><img src="http://img1.ph.126.net/sln-qRD82nc1rDyS1OMsKA==/1262978220601236940.png" alt></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>b) 安装nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">```  </span><br><span class="line">c) 运行nginx  </span><br><span class="line">Nginx不会自行启动。要运行Nginx</span><br></pre></td></tr></table></figure><pre><code>systemctl start nginx</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nginx的运行命令:</span><br></pre></td></tr></table></figure><pre><code>systemctl status nginx 查看nginx的状态  systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d) 系统启动时启动Nginx</span><br></pre></td></tr></table></figure><pre><code>systemctl enable nginx</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：</span><br></pre></td></tr></table></figure><pre><code>sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.nginx目录共享配置  </span><br><span class="line">a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting  </span><br><span class="line">b) 打开 etc/nginx/nginx.conf 文件，设置server</span><br></pre></td></tr></table></figure><pre><code>#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / {       autoindex on;       autoindex_exact_size on;       autoindex_localtime on;}  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">除了可以共享文件，还可以自定义页面</span><br></pre></td></tr></table></figure><pre><code>#自定义服务器页面location / {        root /home/yuting;        index index.html index.htm;}</code></pre><p><code>`</code></p><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-阿里云添加80端口&quot;&gt;&lt;a href=&quot;#1-阿里云添加80端口&quot; class=&quot;headerlink&quot; title=&quot;1.阿里云添加80端口&quot;&gt;&lt;/a&gt;1.阿里云添加80端口&lt;/h3&gt;&lt;p&gt;阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Nginx服务器" scheme="http://yoursite.com/tags/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>世界总是比你的梦想大</title>
    <link href="http://yoursite.com/2019/02/20/hello-world/"/>
    <id>http://yoursite.com/2019/02/20/hello-world/</id>
    <published>2019-02-20T11:51:58.901Z</published>
    <updated>2019-02-23T06:44:57.381Z</updated>
    
    <content type="html"><![CDATA[<p>见得越多，才越感觉自己的渺小。以为观书而知天下之大，然终未亲眼所见，世界那么多美好，正在随着时光而消逝。一步，一步；就算路上没发现风景，可目标就在前方，那就继续走吧。</p><p>如果发现并不美好，只能是梦想太小，继续向前走，就会有让你惊讶的风景。</p><h2 id="当你懈怠时，一定要记得往前走"><a href="#当你懈怠时，一定要记得往前走" class="headerlink" title="当你懈怠时，一定要记得往前走"></a>当你懈怠时，一定要记得往前走</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;见得越多，才越感觉自己的渺小。以为观书而知天下之大，然终未亲眼所见，世界那么多美好，正在随着时光而消逝。一步，一步；就算路上没发现风景，可目标就在前方，那就继续走吧。&lt;/p&gt;
&lt;p&gt;如果发现并不美好，只能是梦想太小，继续向前走，就会有让你惊讶的风景。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
  </entry>
  
</feed>
