<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行者要习，习者要行</title>
  
  <subtitle>世界总是比你的梦想大</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-26T09:33:30.662Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>行者m</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL语法外键、分组、聚合、子查询</title>
    <link href="http://yoursite.com/2019/02/26/mysql%E8%AF%AD%E6%B3%95%E8%81%9A%E5%90%88%E3%80%81%E5%A4%96%E9%94%AE%E3%80%81%E5%88%86%E7%BB%84/"/>
    <id>http://yoursite.com/2019/02/26/mysql语法聚合、外键、分组/</id>
    <published>2019-02-26T09:33:30.593Z</published>
    <updated>2019-02-26T09:33:30.662Z</updated>
    
    <content type="html"><![CDATA[<ol><li>条件语句的写法<br>在sql中可以通过 ‘where 条件语句’ 来对操作对象进行筛选 - 筛选<br>a. 比较运算符：= ，&lt;&gt; , &gt; ,&lt; ,&lt;=,&gt;=<br>注意： 判断一个字段一个字段的值是否为空不能使用=和&lt;&gt;，而是使用 ‘is null’ 和 ‘is not null’。判断是否是空串– 字段名=’’<br>b. 逻辑运算符： and or not<br>c. where 字段名 between 值1 and 值2   —筛选出指定字段的值在值1和值2之间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select stuname,birth from t_student where birth between &apos;1990-1-1&apos; and &apos;1999-12-31&apos;;</span><br></pre></td></tr></table></figure></li></ol><p>d.  where 字段名 in 集合;  — 筛选出字段的值是集合的元素。集合是用（）括起来，里面有多个值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student where stuname in (&apos;小花&apos;,&apos;小明&apos;,&apos;路飞&apos;);</span><br></pre></td></tr></table></figure></p><p>e. like操作</p><ol start="2"><li>数据类型<br>– varchar(size):不定长字符串，字符串最长为size的值<br>– char(size) : 定长字符串，<br>– text: 不限长度，最长255个字符。<br>– int/tinyint(-128~127) 、bigint<br>– float(size,d)/double(size,d)  — size是数字长度，d是小数总位数<br>– bit : 只有0和1 两个值<br>– date/datetime/time: 值可以是时间函数的结果，也可以是时间字符串;计算或比较的时候内部是按时间处理的  </li></ol><p>3.去重<br>select distinct 字段名 from 表名; 对查询到的字段名去掉重复的</p><p>– ==========添加约束<br>– 1.创建表的时候添加约束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists t_college(collid int,</span><br><span class="line">collname varchar(20) not null,   #创建表的时候添加约束</span><br><span class="line">website varchar(300),</span><br><span class="line">intro varchar(200),</span><br><span class="line">primary key(collid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>– 2.通过添加约束索引的方式添加约束<br>– alter table 表名 add constraint 索引名 约束名 (字段名);<br>– 说明：索引名是自己随便命名，用来指向当前添加的约束。<br>alter table t_college add constraint con_website unique (website);   – 给t_college表中的website添加unique约束，约束索引名con_website  </p><p>– 2.1删除约束<br>– alter table 表名 drop index 约束索引名;<br>alter table t_college drop index con_website;  </p><ol start="4"><li>外键和E.R图<br>– 1.什么是外键：表中某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键<br>– 1.1多对1外键的添加，将外键添加到多的一方对应的表中<br>–      一对一的外键添加：将外键随便添加到哪一方，并添加值唯一约束<br>–      多对多的外键添加： 关系型数据中，两张表无法实现多对多的关系，需要一个中间表。(中间表有两个外键,分别参照多对多的两个表的主键)</li></ol><p>– 1.2怎么添加外键：<br>– a.添加外键对应的字段<br>alter table 表名 add column 字段名 约束;<br>– b.给设计好的外键对应的字段添加外键约束<br>– alter table 表1 add constraint 索引名 foreign key (外键字段名1) references 表2 (被参照的字段名2);     — 索引名： 字段1名<em>索引名</em>字段2名，自己取<br>– - 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2  </p><p>– c.删除外键约束<br>alter table 表1  drop foreign key 索引名;   – 可以删除外键约束，但是外键索引还在，需要再删除索引<br>– 注意：删除外键约束的时候，直接删除约束的索引无效，必须先删除约束，然后再删除索引。<br>alter table 表1  drop index 索引名;  – 删除索引  </p><p>– d. 多对多的外键约束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists tb_score(  </span><br><span class="line">scoreid int not null auto_increment,  </span><br><span class="line">mark float(4,1),  </span><br><span class="line">stuid int comment &apos;学生外键&apos;,   </span><br><span class="line">couid int comment &apos;课程外键&apos;,  </span><br><span class="line">primary key(scoreid)  </span><br><span class="line">);  </span><br><span class="line">INSERT INTO tb_score (mark) VALUES (89),(45.5),(100),(95),(60),(77),(90),</span><br><span class="line">(97),(49),(66),(56),(71),(80.5),(33),(87),(56),(74),(68),(80),(92),(34),(75);</span><br></pre></td></tr></table></figure></p><p>– 添加学生的外键约束</p><pre><code>alter table tb_score add constraint fk_stuid_sco  foreign key(stuid)  references tb_student (stuid);  alter table tb_score add constraint fk_couid_sco  foreign key(couid)  references tb_course (couid);  </code></pre><p>=======查询的高级操作<br>– 1.聚合：max(),min(),sum()，avg()– 求平均值 ,count() –求个数<br>– select 聚合函数(字段) from 表名 where 条件;  –按条件对表中指定的字段进行查询，然后将查询结果做相应的聚合运算。聚合运算结果是最终结果。<br>select mark from tb_score;  – 获取表中所有的分数值<br>select max(mark) as maxmark from tb_score;  – 获取这个表中所有分数的最大值<br>select avg(mark) as avgmark from tb_score;<br>select count(mark) as countmark from tb_score where mark&gt;90; – 统计大于90的个数<br>– 计算平均值如果参与运算的对象值为null,那这个数据不会参与运算。求和同样。</p><p>– 2.分组<br>– select 聚合操作(字段1) from 表名 where 条件 group by (字段2);  – 将指定表中满足条件的记录按照字段2的值进行分组(值是一样的在一个组里),然后再将每个分组作为整体按照指定的字段进行指定的聚合操作。<br>– 求每个学生的平均成绩<br>select stuid,avg(mark) from tb_score group by (stuid);<br>– 注意：a.字段操作的位置除了分组字段不用聚合，其他字段都必须聚合<br>–                  b. 分组的时候where要放到分组前对需要分组的数据进行筛选。  </p><p>– having  – 在分组后用having代替where来对分组后的数据进行筛选<br>– 获取平均分数大于60的学生id<br>select stuid from tb_score group by (stuid) having avg(mark)&gt;60;  </p><p>– 3.子查询:将一个查询操作的结果作为另一个查询的数据源。<br>select stuid from tb_score where  mark&gt;90 and stuid is not null; – 获取成绩大于90分的学生id  </p><p>select stuname from tb_student where stuid in<br>(select stuid from tb_score where  mark&gt;90 and stuid is not null;);<br>– 获取成绩大于90分的学生的名字。  </p><p>– 将一个查询结果作为查询对象给另一个查询，第一个查询需要重命名<br>select mark from (一个查询结果) as t2;</p><p>– =============1.学生表===============<br>CREATE TABLE IF NOT EXISTS tb_student<br>(<br>stuid int not NULL auto_increment,<br>stuname VARCHAR(20) not NULL,<br>tel CHAR(11) not NULL,<br>birth date DEFAULT ‘2019-10-21’,<br>addr VARCHAR(100),<br>genter bit,<br>PRIMARY key(stuid)<br>);  </p><p>alter table tb_student add column collid int;<br>alter table tb_student add constraint tb_stu_coll foreign key (collid) references tb_college (collid);</p><p>– ===============2.课程表================<br>CREATE TABLE IF NOT EXISTS tb_course<br>(<br>couid int NOT NULL auto_increment,<br>couname VARCHAR(20) NOT NULL,<br>startdate date NOT NULL DEFAULT ‘2019-10-21’,<br>intro VARCHAR(200),<br>credit int NOT NULL,<br>PRIMARY key(couid)<br>);    </p><p>alter table tb_course add column teaid int;<br>alter table tb_course add constraint tb_cour_tea foreign key (teaid) references tb_teacher (teaid);</p><p>– =================3.学院表====================<br>CREATE TABLE IF NOT EXISTS tb_college<br>(<br>collid int auto_increment,<br>website VARCHAR(200) UNIQUE,<br>collname VARCHAR(50),<br>PRIMARY KEY(collid)<br>);   </p><p>– =================4.老师表====================<br>CREATE TABLE IF NOT EXISTS tb_teacher<br>(<br>teaid int NOT NULL auto_increment,<br>teaname VARCHAR(20) NOT NULL,<br>teaage INT,<br>tel char(11),<br>PRIMARY KEY(teaid)<br>);</p><p>alter table tb_teacher add column collid int;<br>alter table tb_teacher add constraint tb_teac_coll foreign key (collid) references tb_college (collid);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;条件语句的写法&lt;br&gt;在sql中可以通过 ‘where 条件语句’ 来对操作对象进行筛选 - 筛选&lt;br&gt;a. 比较运算符：= ，&amp;lt;&amp;gt; , &amp;gt; ,&amp;lt; ,&amp;lt;=,&amp;gt;=&lt;br&gt;注意： 判断一个字段一个字段的值是否为空不能使用=和&amp;l
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL语法" scheme="http://yoursite.com/tags/MySQL%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法</title>
    <link href="http://yoursite.com/2019/02/25/mysql%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/25/mysql语法/</id>
    <published>2019-02-25T11:53:48.326Z</published>
    <updated>2019-02-26T01:20:01.816Z</updated>
    
    <content type="html"><![CDATA[<p>注意：SQL中大小写不敏感（大写和小写是一样的）；<br>每条SQL语句必须以分号结束。</p><h3 id="一-DDL-和要提供数据库和表的创建、删除和修改"><a href="#一-DDL-和要提供数据库和表的创建、删除和修改" class="headerlink" title="一. DDL - 和要提供数据库和表的创建、删除和修改"></a>一. DDL - 和要提供数据库和表的创建、删除和修改</h3><ol start="0"><li><p>删除数据库：drop database 数据库名； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE school;  #直接删除指定数据库</span><br><span class="line">drop database if exists school; #如果指字数据库存在就删除</span><br></pre></td></tr></table></figure></li><li><p>创建数据库：create database 数据库名；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE school; # 直接创建指定数据库</span><br><span class="line">CREATE DATABASE if not exists school; # 如果不存在就创建</span><br><span class="line">CREATE DATABASE if not exists school default charset utf8;  # 创建数据库的时间设置字符集编码方式为utf8..支持中文</span><br></pre></td></tr></table></figure></li><li><p>使用/切换数据库: use 数据库名；  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use school;</span><br></pre></td></tr></table></figure></li><li><p>新建表： create table 表名(字段名1 类型1，字段名2 类型2，……)；<br><code>注意：a.表名一般需要加前缀‘t’或者‘tb’.</code><br><code>b.字段用来确定表中要存储哪些数据，字段名随便命名，但不能是关键字`</code>c.数据类型必须是MySQL支持的数据类型`<br>常用数据类型：int,char(size)定长字符串size是必须这么长,varchar(size)不定长字符串size是最大值,text  字符串， bit 布尔,date 日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists t_student(stuid int,stuname varchar(5),gender bit,birth date);</span><br></pre></td></tr></table></figure></li></ol><p>create table 表名(字段名1 类型1 约束1，字段名2 类型2 约束2，……);<br><code>常用约束：not null --不能为空 ，default --设置默认值，unique -值唯一，primary key --主键约束, auto_increment - 自动增长.  主键约束：主键指的是表中能够唯一标识一条记录的字段（通过主键值能够找到表中唯一一行记录）学生信息中的学号可以作为主键</code></p><p><code>注意：一个字段可以添加多个约束，约束之间用空格隔开</code><br><code>注意：auto_increment 自动增长（只针对主键有效，并且主键类型是int）</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists t_student</span><br><span class="line">(</span><br><span class="line">stuid int not null default 1 auto_increment,stuname varchar(5) not null,gender bit default 1,birth date,</span><br><span class="line">primary key(stuid)  #设置stuid为当前表的主键（间接约束这个字段的值为唯一）</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>4.删除表： drop table if exists 表名； 注意use 数据库，切换要删除的数据库<br>清空表记录：truncate table 表名;   删除后表还在，记录没有了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_student;</span><br><span class="line">truncate table t_student;</span><br></pre></td></tr></table></figure></p><p>5.修改表：<br>添加字段：alter table 表名 add column 字段名 字段类型 约束; 添加多个字段用逗号隔开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t_student add column score float(5,2) default 0; #删除字段：alter table 表名 drop column 字段名;</span><br></pre></td></tr></table></figure></p><h3 id="二：DML-数据操作语言-–主要针对数据库中数据的增、删、改、查。"><a href="#二：DML-数据操作语言-–主要针对数据库中数据的增、删、改、查。" class="headerlink" title="二：DML 数据操作语言 –主要针对数据库中数据的增、删、改、查。"></a>二：DML 数据操作语言 –主要针对数据库中数据的增、删、改、查。</h3><ol><li>增（添加数据/记录）<br>插入数据、记录： insert into 表名 values(值1，值2，……)； –依次给指定表中的字段赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT into t_student values (1,&apos;张三&apos;,0,&apos;2014-5-6&apos;);</span><br></pre></td></tr></table></figure></li></ol><p>插入数据/记录：insert into 表名(字段名1，字段名2，……) values(值1，值2，……)； 以指定的顺序给指定的字段赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into t_student(stuname,birth) values(&apos;小明&apos;,&apos;2011-2-21&apos;);</span><br><span class="line">insert into t_student(stuname,birth) values(&apos;小花&apos;,&apos;2011-2-22&apos;),(&apos;光光&apos;,&apos;2023-4-6&apos;);  # 一次增加多条数据，</span><br></pre></td></tr></table></figure></p><p><code>注意值的问题：SQL中是数字对应的值直接写，字符需要引号引起来。bit类型的值只有0或者1。。时间可以用内容是满足时间格式的字符串、也可以是通过时间函数获取的值</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">时间函数：now() --当前时间,date(now()) --获取当前日期; select month(now()) --当前月</span><br><span class="line">select now(); </span><br><span class="line">select year(now()); -- 当前年</span><br></pre></td></tr></table></figure></p><ol start="2"><li>删（删除数据/记录）<br>delete from 表名;  – 删除指定表中所有记录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from t_student;</span><br></pre></td></tr></table></figure></li></ol><p>delete from 表名 where 条件语句;  – 删除满足条件的记录<br>SQL中的条件语句：=(判断是否相等),&lt;&gt;(不相等)，&gt;,&gt;=,&lt;,&lt;=<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from t_student where stuid=100;  #删除t_student表中id等于100的记录</span><br></pre></td></tr></table></figure></p><ol start="3"><li>改（修改数据）<br>update 表名 set 字段=新值，字段2=新值2，……; 将指定表中所有行的指定列/字段的值赋值为新值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_student set birth=&apos;1991-2-12&apos;;  #所有生日变成1991</span><br></pre></td></tr></table></figure></li></ol><p>update 表名 set 字段=新值，字段2=新值2，…… where 条件诗句;  将表中满足条件的行中指定字段的值赋为新值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_student set gender=0 where stuname=&apos;小花&apos;;  # 将名字是小花的性别变为0</span><br><span class="line">UPDATE t_student set gender=0 where stuname like &apos;小%&apos;; # 选中开头是小的名字，将性别变为0.。</span><br></pre></td></tr></table></figure></p><p><code>% ：通配符，表示任意个数的任意字符（包括0个）</code><br><code>_ :通配符下划线，表示一个任意字符</code><br><code>注意：通配符只对字符串有效</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_student set gender=1 where stuname like &apos;%小%&apos;; -- 选中姓名中有小字的</span><br></pre></td></tr></table></figure></p><ol start="4"><li>查（获取数据）<br>4.1 直接查询<br>select * from 表名; –获取指定表中所有行所有列（所有数据）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student;</span><br></pre></td></tr></table></figure></li></ol><p>select 字段名1,字段名2,…… from 表名;  –获取指定表中所有行的指定列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select stuid,stuname from t_student;</span><br></pre></td></tr></table></figure></p><p>select * from 表名 where 条件语句;   –获取指定表中所有满足条件行的所有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student where stuname like &apos;%小%&apos;; #所有名字包含小的</span><br></pre></td></tr></table></figure></p><p>4.2列重命名<br>select 字段1 as 新字段1, 字段2 as 新字段2，…… from 表名;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select stuid as &apos;学号&apos;, stuname as &apos;姓名&apos;,gender from t_student; #查询三种，只有2种重命名。。</span><br></pre></td></tr></table></figure></p><p><code>注意：这儿的as可以省略</code><br>4.3对查询结果重新赋值（一般针对布尔数据）<br>select if(字段相关的条件语句，值1，值2) from 表名;<br>select if(字段名，值1，值2) from 表名;  –查询指定的字段，并且判断字段对应的值，是1获取值1，结果是值1；否则为值2<br><code>注意：这儿的if用法是MySQL专有的 if(字段名，值1，值2)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stuname,if(gender,&apos;男&apos;,&apos;女&apos;) from t_student;</span><br><span class="line">select stuname,if(gender,&apos;男&apos;,&apos;女&apos;) as &apos;性别&apos; from t_student;  </span><br><span class="line">通用写法:case 字段 when 值 then 新值1 else 新值2 end</span><br><span class="line">select case gender when 1 then &apos;男&apos; else &apos;女&apos; end as &apos;性别&apos; from t_student;</span><br></pre></td></tr></table></figure></p><p>4.4对列进行合并运算<br>select concat(字段1,字段2,……) from 表名；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(stuname,stuid) as &apos;name_id&apos; from t_student;</span><br><span class="line">select concat(stuname,&apos;:&apos;,stuid) as &apos;name_id&apos; from t_student;</span><br></pre></td></tr></table></figure></p><p><code>注意：数字和字符串数据可以合并，bit类型的数据不可以合并</code><br>4.5模糊查询 – 查询的时候通过like条件来指定查询对像<br>SQL中支持逻辑运算符and(逻辑与) 和 or(逻辑或)，not(逻辑非)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student where stuname like &apos;%小%&apos; and not stuid&gt;3;</span><br></pre></td></tr></table></figure></p><p>4.6结果排序(先按之前的语法查询再排序)<br>select <em> from 表名 order by 字段;  –对查询结果按指定字段的值进行升序排序<br>select </em> from 表名 order by 字段 ASC; –升序排序<br>select * from 表名 order by 字段 desc;  –降序排序<br>排序的时候可以通过在order by 后面加多个字段进行联排，写在前面优先级高<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student order by gender asc, stuid desc;  #先按性别进行升序排序，再按学号降序排序。</span><br></pre></td></tr></table></figure></p><p>4.7限制  对查询的结果进行限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 limit N;  #获取查询结果的前N条记录</span><br><span class="line">select * from t_student limit 3;  # 获取查询结果的前3条记录</span><br><span class="line">--  select * from 表名 limit M offset N;  #对查询结果跳过前N条数据，取M数据</span><br><span class="line">select * from t_student limit 4 offset 3;  #跳过前3条数据，再取4条数据</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注意：SQL中大小写不敏感（大写和小写是一样的）；&lt;br&gt;每条SQL语句必须以分号结束。&lt;/p&gt;
&lt;h3 id=&quot;一-DDL-和要提供数据库和表的创建、删除和修改&quot;&gt;&lt;a href=&quot;#一-DDL-和要提供数据库和表的创建、删除和修改&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL语法" scheme="http://yoursite.com/tags/MySQL%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql服务器</title>
    <link href="http://yoursite.com/2019/02/23/mysql%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/23/mysql配置/</id>
    <published>2019-02-23T08:48:25.535Z</published>
    <updated>2019-02-23T09:41:05.436Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源: <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:  <code>yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务: <code>systemctl enable mysqld</code>  </p></li><li>启动/重启MySQL服务：systemctl restart mysqld  </li><li>查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log  </li><li>更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’<br>这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>　　　　方法一：把密码设置复杂点（这是最直接的方法）</p><p>　　　　方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　　　　　编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行validate_password=off</p><p>　　　　　　　　编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:<br>a. 登录进MySQL:  <code>mysql -uroot -p密码</code><br>b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code><br>c. 刷新权限：<code>flush privileges;­</code>  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载MySQL源安装包: &lt;code&gt;wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装MySQL源: 
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql服务器" scheme="http://yoursite.com/tags/mysql%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux指令系统</title>
    <link href="http://yoursite.com/2019/02/22/Linux%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/02/22/Linux指令/</id>
    <published>2019-02-22T09:42:53.654Z</published>
    <updated>2019-02-23T04:30:43.158Z</updated>
    
    <content type="html"><![CDATA[<p>1.连接服务器:    ssh  root@ip地址<br>2.退出:  logout</p><p>命令名称 [命名参数] [命令对象]</p><h3 id="一、日常操作"><a href="#一、日常操作" class="headerlink" title="一、日常操作"></a>一、日常操作</h3><h6 id="1-cd指令-进入指定文件夹"><a href="#1-cd指令-进入指定文件夹" class="headerlink" title="1.cd指令       - 进入指定文件夹"></a>1.cd指令       - 进入指定文件夹</h6><p>cd  目录     - 进入指定目录(也可以是文件夹对应的路径)<br>               ~相对路径 — 绝对路径</p><p>cd  ..       - 返回上层目录<br>cd  ~    - 回到根目录<br>cd  /    - 进入系统根目录  </p><h6 id="2-ls指令-查看当前目录中的内容"><a href="#2-ls指令-查看当前目录中的内容" class="headerlink" title="2. ls指令        - 查看当前目录中的内容"></a>2. ls指令        - 查看当前目录中的内容</h6><p>  ls<br> ls  -l/-lh              -  查看详情<br>   ls -a           - 隐藏文件也一起显示<br>   ls -R        - 递归显示所有内容<br>   ls -S/-t        - 按大小/时间排序 </p><h6 id="3-pwd指令-显示当前完整目录"><a href="#3-pwd指令-显示当前完整目录" class="headerlink" title="3.pwd指令     - 显示当前完整目录"></a>3.pwd指令     - 显示当前完整目录</h6><p>   pwd</p><h6 id="4-文件操作指令"><a href="#4-文件操作指令" class="headerlink" title="4.文件操作指令"></a>4.文件操作指令</h6><p>touch  文件名        - 新建文件<br>cat 文件名           - 查看文件内容<br>vim/vi  文件名          -打开文件  </p><p>rm    文件名        - 删除文件<br>rm - r 目录        - 删除文件夹  </p><p>cp  文件名1  文件名2    - 将文件1中的内容拷贝到文件2中<br>cp  文件1路径   文件2路径<br>cp -r  文件名/目录名   目录2    - 将文件/目录拷贝到目录2中  </p><p>mv    文件名1  文件名2    - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）<br>mv  文件1路径   文件2路径</p><p>mv    文件名1  文件目录    - 将文件1移动到指定目录中<br><code>注意: mv指令不能加-r来操作目录</code><br><code>(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)</code></p><p>mkdir  目录名        - 新建文件夹<br>mkdir -p a/b/c        - 按层级创建a,b,c三个文件夹<br>mkdir -p a/{b,c}/{d,e,f}    -同一层级创建多个a创建两个，每个里再创建3个<br>rmdir  目录名        - 删除指定空目录</p><h6 id="5-history-显示历史指令记录"><a href="#5-history-显示历史指令记录" class="headerlink" title="5.history        - 显示历史指令记录"></a>5.history        - 显示历史指令记录</h6><p>bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “<br>修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc   </p><h6 id="6-链接"><a href="#6-链接" class="headerlink" title="6.链接"></a>6.链接</h6><p>ln -s 源路径  目标路径        - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)<br>ln 源路径  目标路径            - 给源路径对应的文件在目标路径下创建一个硬链接（了解）</p><p><code>注意: 源文件不存在的时候，软件无效，硬链接变成普通文件</code></p><h6 id="7-快捷键"><a href="#7-快捷键" class="headerlink" title="7.快捷键"></a>7.快捷键</h6><p>ctr + f         - 前进一个字符<br>ctr + b        - 后退一个字符<br>ctr + a        - 回到行首<br>ctr + e         - 回到行尾<br>ctr + w        - 向左删除一个单词<br>ctr + u        - 向左删除全部<br>ctr + k        - 向右删除全部<br>ctr + y        - 粘贴上次删除的内容<br>ctr + l        - 清屏    </p><h3 id="二、进程相关指令-用得较少"><a href="#二、进程相关指令-用得较少" class="headerlink" title="二、进程相关指令(用得较少)"></a>二、进程相关指令(用得较少)</h3><p>1.ps指令<br>ps                        - 进程状态<br>ps -aux  或者  ps ex            - 查看进程<br>ps -aux|grep 进程名        - 查看指定进程<br>ps grep  进程ID  </p><p>2.top指令<br>top                         - 动态监控进程<br>top  -p PID1,PID2,….        - 动态监控指定进程</p><p>3.free指令<br>free -单位                    - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g,  -k等！</p><p>4.kill指令</p><p>kill 进程号                    - 杀死指定的进程<br>kill -1/-9/-15                - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程<br>pkill  进程名                - 按名字处理进程<br>killall 进程名                - 处理名字匹配的进程<br>uptime                    - 查看系统状态  </p><h3 id="三、权限管理"><a href="#三、权限管理" class="headerlink" title="三、权限管理"></a>三、权限管理</h3><p>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)</p><p>users                                     - 查看当前用户<br>groups                                 - 查看当前分组</p><p>groupadd  分组名                            - 添加分组</p><p>useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名        - 创建一个用户添加到指定的分组中(在home创建相应的文件夹)</p><p>usermod -G 分组列表 用户名                    - 修改分组</p><p>passwd 用户名                            - 修改密码</p><p>su  用户名                                - 切换用户身份</p><p>sudo                                        - 以管理员执行其他程序<br>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序<br>          b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容  </p><pre><code>## Allow root to run any commands anywhere  root    ALL=(ALL)       ALL  xiaoming ALL=(ALL)      ALL        (自己添加的xiaoming是用户名)</code></pre><p>2.chmod<br>chmod       权限值   文件            - 修改指定文件的权限  </p><p>chmod    [a,u,g,o][+,-][r,w,x]  文件            - 为指定文件，给所有用户添加相应的权限<br>                                              (a:所有，u:自己，g:同组，o:其他；<br>                                            +：添加， -: 取消；<br>                                            r:读，w:写，x:执行)<br>chown  用户名     文件            - 改变文件所有者</p><p>(权限制是三组二进制值)<br>self      group    other<br>rwx      rwx        rwx<br>111       101        001            - 自己读写可执行，同一分组的只读可执行，其他的只可执行<br>110      100        000  </p><p>chmod  644  文件<br>chmod  777   文件<br>chmod 666    文件  </p><h3 id="四、日志管理"><a href="#四、日志管理" class="headerlink" title="四、日志管理"></a>四、日志管理</h3><p>1.cat指令<br>cat       文件                - 查看文件内容</p><p>2.查看部分<br>head -n  N  文件        - 查看前N行内容<br>tail  -n  N    文件         - 查看后N行内容</p><p>3.<br>less [-N]  文件  </p><pre><code>- 按 j 向下  - 按 k 向上  - 按 f 向下翻屏  - 按    b 向上翻屏  - 按 g 到全文开头  - 按 G 到全文结尾  - 按 Q 退出    </code></pre><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载  </p><p>4.处理<br>sort                  - 排序  (cat 文件 |sort)<br>uniq                - 去重  (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用:  |sort|uniq<br>awk ‘{print $N}’    - 打印第N列的内容(netstat -natp|awk ‘{print $4}’)</p><p>history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3           -获取历史指令中，使用最频繁的三个指令</p><p>5.重定向<br>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）<br>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)</p><p>6.统计<br>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>6.查找<br>grep  查看对象    目录/文件  参数<br>​<br>    参数：<br>        -i    忽略大小写:         grep you bb.txt   -i<br>        -n   显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n<br>        -E   通过正则表达式匹配:     grep -E  ‘正则表达式’  文件<br>        注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B<br>                                           支持：.   +, *, ?, {N,M}, [], ^, $</p><pre><code>    -v   忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)                    grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v    -rn  递归查找目录，并打印行号    grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)    —include=‘*.py’    仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos;    —exclude=‘*.js’    不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos;例如：    grep you bb.txt      grep you bb.txt -i    grep you bb.txt -i -n    grep -E &apos;[0-9]+&apos; bb.txt </code></pre><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><pre><code>例：find ./ -size +20k -size -100k -name &apos;*.txt&apos;   (找当前目录下大于20k并且小于100k的所有txt文件)</code></pre><p>which  指令        - 精确查找当前可执行的指令<br>whereis  指令    - 查找所有匹配的命令</p><h3 id="五、网络管理"><a href="#五、网络管理" class="headerlink" title="五、网络管理"></a>五、网络管理</h3><p>ifconfig     查看网卡状态</p><p>netstat   -natp                    - 查看网络连接状态<br>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态    </p><p>ping  地址<br>ping  -i   时间    地址<br>ping  -c  次数    地址</p><p>telnet  ip地址    端口         - 查看远程主机网络连接状况</p><p>dig 地址            - 查看DNS</p><p>** wget  地址            - 下载  </p><h3 id="六、使用包管理工具"><a href="#六、使用包管理工具" class="headerlink" title="六、使用包管理工具"></a>六、使用包管理工具</h3><p>包管理工具：yum </p><ul><li>yum search：搜索软件包，例如yum search nginx。  </li><li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。  </li><li>yum install：安装软件包，例如yum install nginx。  </li><li>yum remove：删除软件包，例如yum remove nginx。  </li><li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。  </li><li>yum check-update：检查有哪些可以更新的软件包。  </li><li>yum info：显示软件包的相关信息，例如yum info nginx。  </li></ul><p>源代码构建安装  </p><ol><li>wget  安装包的路径        -下载安装包  </li><li>gunzip/tar  压缩包         - 解压、解归档  </li><li>(设置安装路径)  </li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序  </li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式  </li></ol><p>压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar</p><p>本地发送远程文件 scp指令：<br>Scp 文件 root@ip地址：服务器上保存被发送文件的路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.连接服务器:    ssh  root@ip地址&lt;br&gt;2.退出:  logout&lt;/p&gt;
&lt;p&gt;命令名称 [命名参数] [命令对象]&lt;/p&gt;
&lt;h3 id=&quot;一、日常操作&quot;&gt;&lt;a href=&quot;#一、日常操作&quot; class=&quot;headerlink&quot; title=&quot;一、日
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux命令" scheme="http://yoursite.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2019/02/22/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/22/Hexo博客搭建/</id>
    <published>2019-02-22T09:42:53.652Z</published>
    <updated>2019-02-23T04:29:40.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1. 搭建博客"></a>1. 搭建博客</h3><p>使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </p><ol><li>首先在自己的电脑上创建一个空的文件夹’Hexo’  </li><li>在gitbash中终端中通过<code>cd</code>指令进入到刚才创建的文件夹中   </li><li>输入指令 <code>npm install -g hexo</code> 安装Hexo  </li><li>输入指令 <code>hexo init</code> 进行初始化  </li><li>依次输入指令<code>npm install</code> <code>hexo server</code> 启动服务器<br>博客内容发生改变后可以通过<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> <code>hexo server</code>刷新后重新启动    </li></ol><h3 id="2-部署博客"><a href="#2-部署博客" class="headerlink" title="2. 部署博客"></a>2. 部署博客</h3><ol><li><p>在github上创建一个空的仓库，仓库名： <code>用户名.github.io</code>  </p></li><li><p>修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容</p><p>deploy</p><p>  type: git<br>  repository: <a href="https://github.com/hehe670/hehe670-github.io.git" target="_blank" rel="noopener">https://github.com/hehe670/hehe670-github.io.git</a><br>  branch: master  <code>`</code></p></li><li><p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code>  </p></li><li><p>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-搭建博客&quot;&gt;&lt;a href=&quot;#1-搭建博客&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建博客&quot;&gt;&lt;/a&gt;1. 搭建博客&lt;/h3&gt;&lt;p&gt;使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   &lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="hexo博客" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git的使用 - 版本控制</title>
    <link href="http://yoursite.com/2019/02/22/git%E7%9A%84%E4%BD%BF%E7%94%A8%20-%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2019/02/22/git的使用 - 版本控制/</id>
    <published>2019-02-22T09:42:53.650Z</published>
    <updated>2019-02-23T04:28:19.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的使用-版本控制"><a href="#git的使用-版本控制" class="headerlink" title="git的使用 - 版本控制"></a>git的使用 - 版本控制</h2><h3 id="1-代码托管平台"><a href="#1-代码托管平台" class="headerlink" title="1.代码托管平台"></a>1.代码托管平台</h3><p>github.com<br>gitee.com<br>coding.net</p><h3 id="2-git命令"><a href="#2-git命令" class="headerlink" title="2.git命令"></a>2.git命令</h3><p>基本指令<br>git init   ——  新建git仓库<br>git add 文件/文件夹  ——  将文件添加到缓存区中<br>git add  -A    ——  将工作区中的所有内容都提交</p><p>git status ———    查看git状态<br>git commit -m  ‘提交信息’  ——  将缓存区中的内容全部提交到git本地仓库中<br>git commit -a -m ‘清空’</p><p>git log   ——-    查看提交日志</p><p>git reset  - - hard   HEAD——   让工作目录中的内容和仓库中的内容保持一致<br>git reset  –hard HEAD^   ——  回到上一个版本<br>git  reset  - - hard 版本号  ——  回到指定的版本</p><p>git checkout    文件名   ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态), 不能通过-A来恢复所有文件</p><p>1.没有本地仓库只有远程仓库(刚到公司，手头没有公司项目需要从公司的gitlab或者其他远程仓库上克隆到本地)</p><p>先cd到你打算方法项目的目录下<br>git clone <url>  - 将服务器上的项目(仓库)克隆</url></p><p>2.本地有项目，并且已经更新过版本。需要关联远程仓库</p><p>先在代码托管平台创建空的远程仓库(不要自动创建README)</p><p>cd到本地仓库，执行： git remote add origin 仓库地址</p><p><code>注意: 让本地已有的仓库和远程仓库关联的时候，远程仓库创建的时候不能添加README文件(创建空的仓库)</code><br>git remote add origin 地址              关联远程仓库(只需要关联一次)<br>git push [-u] origin master  - 提交  (-u在第一次提交分之的时候才用)</p><p>如果创建远程仓库的时候仓库中有默认文件<br>git pull   —rebase origin master</p><h3 id="1分之管理："><a href="#1分之管理：" class="headerlink" title="1分之管理："></a>1分之管理：</h3><p>a.创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之<br>b.开发一般会自己创建一个develop分之，用来开发和测试<br>c.多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发</p><p>常见分之： master, develop, 功能/人员分之</p><p>git branch [-a]           - 查看分之<br>git branch 分之名        - 创建分之<br>git checkout   分支名        -   切换分之<br>git checkout -b 分之名            - 切换并创建新的分之</p><p>git diff    分之1  分之2        - 查看两个分之之间的差异</p><p>git merge 分之名                - 让当前分之和指定分之进行合并  (让当前分之拥有指定分之的内容)</p><p><code>注意: 切换分之、push、pull，这些操作前要保证工作区是clean</code></p><p>练习：创建一个开发分之(develop),然后在创建两个开发者分之zhangsan和lisi;<br>         然后在zhangsan的分之上添加一个文件夹(aaa)，文件夹中有一个文件(文件不能为空)<br>         在lisi的分之上添加一个图片<br>         最后将zhangsan和lisi分之都合并到develop中；然后再将develop合并到master上<br>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p><p>ssh地址的使用<br>配置全局的用户信息(windows)<br>git  global  config user.name  “yuting”<br>git  global  config user.email    “<a href="mailto:yuting@163.com" target="_blank" rel="noopener">yuting@163.com</a>”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git的使用-版本控制&quot;&gt;&lt;a href=&quot;#git的使用-版本控制&quot; class=&quot;headerlink&quot; title=&quot;git的使用 - 版本控制&quot;&gt;&lt;/a&gt;git的使用 - 版本控制&lt;/h2&gt;&lt;h3 id=&quot;1-代码托管平台&quot;&gt;&lt;a href=&quot;#1-代码托
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="git命令" scheme="http://yoursite.com/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>vim编辑器之神</title>
    <link href="http://yoursite.com/2019/02/22/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/"/>
    <id>http://yoursite.com/2019/02/22/vim编辑器之神/</id>
    <published>2019-02-22T09:42:53.601Z</published>
    <updated>2019-02-23T08:12:45.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="http://img0.ph.126.net/G1W7LlyABzVRWxR0NH7lBQ==/6608192426287772805.png" alt> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><h4 id="2-保存和退出"><a href="#2-保存和退出" class="headerlink" title="2.保存和退出"></a>2.保存和退出</h4><p>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><h4 id="3-光标操作"><a href="#3-光标操作" class="headerlink" title="3.光标操作"></a>3.光标操作</h4><p>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><h4 id="4-文本操作"><a href="#4-文本操作" class="headerlink" title="4.文本操作"></a>4.文本操作</h4><p>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找   有冒号的是在按ESC后的命令行</p><p>**:/正则表达式[/参数]   – 搜索匹配正则表达式的内容，按回车回到命令模式 按n往前查找，按N往后查找</p><p><strong>:1,$s/被替换对象/替换内容/gice</strong>    – 将正则表达式匹配到的内容替换成指定内容 </p><p>注意：参数可以没有  </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre><p>文件对比，同时打开两个文件时，ctr + w光标切换到另一个文件中</p><p>：b  2  切换光标所在屏显示第2个文件内容</p><p>sp  或 vs  实现水平或垂直分屏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置vimrc配置&quot;&gt;&lt;a href=&quot;#配置vimrc配置&quot; class=&quot;headerlink&quot; title=&quot;配置vimrc配置&quot;&gt;&lt;/a&gt;配置vimrc配置&lt;/h3&gt;&lt;p&gt;在shell中可以通过 &lt;code&gt;vim ~/.vimrc&lt;/code&gt; 或者 &lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器</title>
    <link href="http://yoursite.com/2019/02/22/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/02/22/Nginx服务器安装/</id>
    <published>2019-02-22T09:42:53.599Z</published>
    <updated>2019-02-23T08:14:10.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="http://img2.ph.126.net/jzQlz9J-ndh9xXhO-3z71w==/1811572950210331610.png" alt="打开安全组设置"><br><img src="http://img2.ph.126.net/JNSNSZ1QyoX6XKatM_Owtg==/3041055648482420300.png" alt><br><img src="http://img1.ph.126.net/gVHVko9xCqDRh5x3htTxbg==/804455483539663219.png" alt><br><img src="http://img1.ph.126.net/sln-qRD82nc1rDyS1OMsKA==/1262978220601236940.png" alt></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>b) 安装nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">```  </span><br><span class="line">c) 运行nginx  </span><br><span class="line">Nginx不会自行启动。要运行Nginx</span><br></pre></td></tr></table></figure><pre><code>systemctl start nginx</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nginx的运行命令:</span><br></pre></td></tr></table></figure><pre><code>systemctl status nginx 查看nginx的状态  systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d) 系统启动时启动Nginx</span><br></pre></td></tr></table></figure><pre><code>systemctl enable nginx</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：</span><br></pre></td></tr></table></figure><pre><code>sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.nginx目录共享配置  </span><br><span class="line">a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting  </span><br><span class="line">b) 打开 etc/nginx/nginx.conf 文件，设置server</span><br></pre></td></tr></table></figure><pre><code>#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / {       autoindex on;       autoindex_exact_size on;       autoindex_localtime on;}  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">除了可以共享文件，还可以自定义页面</span><br></pre></td></tr></table></figure><pre><code>#自定义服务器页面location / {        root /home/yuting;        index index.html index.htm;}</code></pre><p><code>`</code></p><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-阿里云添加80端口&quot;&gt;&lt;a href=&quot;#1-阿里云添加80端口&quot; class=&quot;headerlink&quot; title=&quot;1.阿里云添加80端口&quot;&gt;&lt;/a&gt;1.阿里云添加80端口&lt;/h3&gt;&lt;p&gt;阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Nginx服务器" scheme="http://yoursite.com/tags/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>世界总是比你的梦想大</title>
    <link href="http://yoursite.com/2019/02/20/hello-world/"/>
    <id>http://yoursite.com/2019/02/20/hello-world/</id>
    <published>2019-02-20T11:51:58.901Z</published>
    <updated>2019-02-23T06:44:57.381Z</updated>
    
    <content type="html"><![CDATA[<p>见得越多，才越感觉自己的渺小。以为观书而知天下之大，然终未亲眼所见，世界那么多美好，正在随着时光而消逝。一步，一步；就算路上没发现风景，可目标就在前方，那就继续走吧。</p><p>如果发现并不美好，只能是梦想太小，继续向前走，就会有让你惊讶的风景。</p><h2 id="当你懈怠时，一定要记得往前走"><a href="#当你懈怠时，一定要记得往前走" class="headerlink" title="当你懈怠时，一定要记得往前走"></a>当你懈怠时，一定要记得往前走</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;见得越多，才越感觉自己的渺小。以为观书而知天下之大，然终未亲眼所见，世界那么多美好，正在随着时光而消逝。一步，一步；就算路上没发现风景，可目标就在前方，那就继续走吧。&lt;/p&gt;
&lt;p&gt;如果发现并不美好，只能是梦想太小，继续向前走，就会有让你惊讶的风景。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
  </entry>
  
</feed>
